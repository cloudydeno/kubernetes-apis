// Autogenerated Schema file for ResourceV1alpha3
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** CELDeviceSelector contains a CEL expression for selecting a device. */
export interface CELDeviceSelector {
  expression: string;
}
export function toCELDeviceSelector(input: c.JSONValue): CELDeviceSelector {
  const obj = c.checkObj(input);
  return {
    expression: c.checkStr(obj["expression"]),
  }}
export function fromCELDeviceSelector(input: CELDeviceSelector): c.JSONValue {
  return {
    ...input,
  }}

/** DeviceSelector must have exactly one field set. */
export interface DeviceSelector {
  cel?: CELDeviceSelector | null;
}
export function toDeviceSelector(input: c.JSONValue): DeviceSelector {
  const obj = c.checkObj(input);
  return {
    cel: c.readOpt(obj["cel"], toCELDeviceSelector),
  }}
export function fromDeviceSelector(input: DeviceSelector): c.JSONValue {
  return {
    ...input,
    cel: input.cel != null ? fromCELDeviceSelector(input.cel) : undefined,
  }}

/** The device this taint is attached to has the "effect" on any claim which does not tolerate the taint and, through the claim, to pods using the claim. */
export interface DeviceTaint {
  effect: string;
  key: string;
  timeAdded?: c.Time | null;
  value?: string | null;
}
export function toDeviceTaint(input: c.JSONValue): DeviceTaint {
  const obj = c.checkObj(input);
  return {
    effect: c.checkStr(obj["effect"]),
    key: c.checkStr(obj["key"]),
    timeAdded: c.readOpt(obj["timeAdded"], c.toTime),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function fromDeviceTaint(input: DeviceTaint): c.JSONValue {
  return {
    ...input,
    timeAdded: input.timeAdded != null ? c.fromTime(input.timeAdded) : undefined,
  }}

/** DeviceTaintRule adds one taint to all devices which match the selector. This has the same effect as if the taint was specified directly in the ResourceSlice by the DRA driver. */
export interface DeviceTaintRule {
  apiVersion?: "resource.k8s.io/v1alpha3";
  kind?: "DeviceTaintRule";
  metadata?: MetaV1.ObjectMeta | null;
  spec: DeviceTaintRuleSpec;
}
export function toDeviceTaintRule(input: c.JSONValue): DeviceTaintRule & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "resource.k8s.io/v1alpha3", "DeviceTaintRule"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: toDeviceTaintRuleSpec(obj["spec"]),
  }}
export function fromDeviceTaintRule(input: DeviceTaintRule): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "resource.k8s.io/v1alpha3", "DeviceTaintRule"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromDeviceTaintRuleSpec(input.spec) : undefined,
  }}

/** DeviceTaintRuleSpec specifies the selector and one taint. */
export interface DeviceTaintRuleSpec {
  deviceSelector?: DeviceTaintSelector | null;
  taint: DeviceTaint;
}
export function toDeviceTaintRuleSpec(input: c.JSONValue): DeviceTaintRuleSpec {
  const obj = c.checkObj(input);
  return {
    deviceSelector: c.readOpt(obj["deviceSelector"], toDeviceTaintSelector),
    taint: toDeviceTaint(obj["taint"]),
  }}
export function fromDeviceTaintRuleSpec(input: DeviceTaintRuleSpec): c.JSONValue {
  return {
    ...input,
    deviceSelector: input.deviceSelector != null ? fromDeviceTaintSelector(input.deviceSelector) : undefined,
    taint: input.taint != null ? fromDeviceTaint(input.taint) : undefined,
  }}

/** DeviceTaintSelector defines which device(s) a DeviceTaintRule applies to. The empty selector matches all devices. Without a selector, no devices are matched. */
export interface DeviceTaintSelector {
  device?: string | null;
  deviceClassName?: string | null;
  driver?: string | null;
  pool?: string | null;
  selectors?: Array<DeviceSelector> | null;
}
export function toDeviceTaintSelector(input: c.JSONValue): DeviceTaintSelector {
  const obj = c.checkObj(input);
  return {
    device: c.readOpt(obj["device"], c.checkStr),
    deviceClassName: c.readOpt(obj["deviceClassName"], c.checkStr),
    driver: c.readOpt(obj["driver"], c.checkStr),
    pool: c.readOpt(obj["pool"], c.checkStr),
    selectors: c.readOpt(obj["selectors"], x => c.readList(x, toDeviceSelector)),
  }}
export function fromDeviceTaintSelector(input: DeviceTaintSelector): c.JSONValue {
  return {
    ...input,
    selectors: input.selectors?.map(fromDeviceSelector),
  }}

/** DeviceTaintRuleList is a collection of DeviceTaintRules. */
export interface DeviceTaintRuleList extends ListOf<DeviceTaintRule> {
  apiVersion?: "resource.k8s.io/v1alpha3";
  kind?: "DeviceTaintRuleList";
};
export function toDeviceTaintRuleList(input: c.JSONValue): DeviceTaintRuleList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "resource.k8s.io/v1alpha3", "DeviceTaintRuleList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toDeviceTaintRule),
  }}
